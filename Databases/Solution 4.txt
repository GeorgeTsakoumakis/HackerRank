- Querying XML Datastores with XPath - 1

# Standard ruby library for XML parsing
require 'rexml/document'
include REXML

# Enter your code here. Read input from STDIN. Print output to STDOUT
xmlText = "" 

# Read the input XML Fragment
while line = gets()
	xmlText += line
end

doc = Document.new xmlText

# XPath Selector for listing the titles of the movies, in the same order as which they occur in the given XML.
# Fill in the blanks to complete the required XPath selector query
puts doc.elements.each("collection/movie/@title")


- Querying XML Datastores with XPath - 2

# Standard ruby library for XML parsing
require 'rexml/document'
include REXML

# Enter your code here. Read input from STDIN. Print output to STDOUT
xmlText = "" 

# Read the input XML Fragment
while line = gets()
	xmlText += line
end

doc = Document.new xmlText

# XPath Selector for listing the popularity of the movies, in the same order as which they occur in the given XML.
# Fill in the blanks to complete the required XPath selector query
puts doc.elements.each("collection/movie/popularity/text()")


- Querying XML Datastores with XPath - 3
# Standard ruby library for XML parsing
require 'rexml/document'
include REXML

# Enter your code here. Read input from STDIN. Print output to STDOUT
xmlText = "" 

# Read the input XML Fragment
while line = gets()
	xmlText += line
end

doc = Document.new xmlText

# XPath Selector for listing the format of the movies with popularity<8, in the same order as which they occur in the given XML.
# Fill in the blanks to complete the required XPath selector query
puts doc.elements.each("collection/movie[popularity/text() < 8]/format/text()")


- Querying XML Datastores with XPath - 4

# Standard ruby library for XML parsing
require 'rexml/document'
include REXML

# Enter your code here. Read input from STDIN. Print output to STDOUT
xmlText = "" 

# Read the input XML Fragment
while line = gets()
	xmlText += line
end

doc = Document.new xmlText

#XPath selector for picking up the popularity of the movie with the title "Trigun"
puts doc.elements["collection/movie[@title = 'Trigun']/popularity/text()"]


- Querying XML Datastores with XPath - 5

# Standard ruby library for XML parsing
require 'rexml/document'
include REXML

# Enter your code here. Read input from STDIN. Print output to STDOUT
xmlText = "" 

# Read the input XML Fragment
while line = gets()
	xmlText += line
end

doc = Document.new xmlText



# XPath selector for picking up the shelf of the movie named 'Transformers'
# Fill in the blanks to complete the required XPath selector query
# Assume there is only ONE such movie.
puts doc.elements["collection/movie[@title='Transformers']/@shelf"]


- Querying XML Datastores with XPath - 6

# Standard ruby library for XML parsing
require 'rexml/document'
include REXML

# Enter your code here. Read input from STDIN. Print output to STDOUT
xmlText = "" 

# Read the input XML Fragment
while line = gets()
	xmlText += line
end

doc = Document.new xmlText


#XPath selector for picking up the name of the movie for which the description contains the substring "bit"
puts doc.elements["collection/movie[contains(/description, 'bit')]/@title"]


- Querying XML Datastores with XPath - 7

# Standard ruby library for XML parsing
require 'rexml/document'
include REXML

# Enter your code here. Read input from STDIN. Print output to STDOUT
xmlText = "" 

# Read the input XML Fragment
while line = gets()
	xmlText += line
end

doc = Document.new xmlText

# XPath Selector for computing the average popularity of the movies in the given XML fragment.
# Fill in the blanks to complete the required XPath selector query
puts XPath.match(doc,"sum(collection/movie/popularity) div count(collection/movie/popularity)")


- Querying XML Datastores with XPath - 8

# Standard ruby library for XML parsing
require 'rexml/document'
include REXML

# Enter your code here. Read input from STDIN. Print output to STDOUT
xmlText = "" 

# Read the input XML Fragment
while line = gets()
	xmlText += line
end

doc = Document.new xmlText

# Write the XPath selector for finding the number of characters (i.e, the string-length) in the description of the second movie in the XML file.
# Fill in the blanks to complete the required XPath selector query
puts doc.elements.each("string-length(collection/movie[2]/description/text())")


- Querying XML Datastores with XPath - 9

# Standard ruby library for XML parsing
require 'rexml/document'
include REXML

# Enter your code here. Read input from STDIN. Print output to STDOUT
xmlText = "" 

# Read the input XML Fragment
while line = gets()
	xmlText += line
end

doc = Document.new xmlText

# Write the XPath selector for listing the title of the second movie for which the marked shelf = "B".
# Fill in the blanks to complete the required XPath selector query
puts doc.elements.each("collection/movie[@shelf='B'][2]/@title")


- Querying XML Datastores with XPath - 10

# Standard ruby library for XML parsing
require 'rexml/document'
include REXML

# Enter your code here. Read input from STDIN. Print output to STDOUT
xmlText = "" 

# Read the input XML Fragment
while line = gets()
	xmlText += line
end

doc = Document.new xmlText

# XPath Selector for listing the titles of the last two movies in the list, listed in the same order as which they occur in the given XML.
# Fill in the blanks to complete the required XPath selector query
puts doc.elements.each("collection/movie[position()>last()-2]/@title")


- Querying XML Datastores with XPath - 11

# Standard ruby library for XML parsing
require 'rexml/document'
include REXML

# Enter your code here. Read input from STDIN. Print output to STDOUT
xmlText = "" 

# Read the input XML Fragment
while line = gets()
	xmlText += line
end

doc = Document.new xmlText

# XPath Selector for listing the titles of the movies, in the same order as which they occur in the given XML.
# Fill in the blanks to complete the required XPath selector query
puts doc.elements.each("collection/movie[position() mod 2 != 0]/@title")


- Databases - Relational Calculus

We execute the following query (in Relational Calculus) on a set of integers S.
For the given set S, what will be the answer? Fill up the answer box with the required integer.

S = {4,5,6,7,10,11,19,18,3}


=> 19

