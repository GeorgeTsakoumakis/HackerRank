- Querying XML Datastores with XPath - 1

# Standard ruby library for XML parsing
require 'rexml/document'
include REXML

# Enter your code here. Read input from STDIN. Print output to STDOUT
xmlText = "" 

# Read the input XML Fragment
while line = gets()
	xmlText += line
end

doc = Document.new xmlText

# XPath Selector for listing the titles of the movies, in the same order as which they occur in the given XML.
# Fill in the blanks to complete the required XPath selector query
puts doc.elements.each("collection/movie/@title")


- Querying XML Datastores with XPath - 2

# Standard ruby library for XML parsing
require 'rexml/document'
include REXML

# Enter your code here. Read input from STDIN. Print output to STDOUT
xmlText = "" 

# Read the input XML Fragment
while line = gets()
	xmlText += line
end

doc = Document.new xmlText

# XPath Selector for listing the popularity of the movies, in the same order as which they occur in the given XML.
# Fill in the blanks to complete the required XPath selector query
puts doc.elements.each("collection/movie/popularity/text()")


- Querying XML Datastores with XPath - 3
# Standard ruby library for XML parsing
require 'rexml/document'
include REXML

# Enter your code here. Read input from STDIN. Print output to STDOUT
xmlText = "" 

# Read the input XML Fragment
while line = gets()
	xmlText += line
end

doc = Document.new xmlText

# XPath Selector for listing the format of the movies with popularity<8, in the same order as which they occur in the given XML.
# Fill in the blanks to complete the required XPath selector query
puts doc.elements.each("collection/movie[popularity/text() < 8]/format/text()")


- Querying XML Datastores with XPath - 4

# Standard ruby library for XML parsing
require 'rexml/document'
include REXML

# Enter your code here. Read input from STDIN. Print output to STDOUT
xmlText = "" 

# Read the input XML Fragment
while line = gets()
	xmlText += line
end

doc = Document.new xmlText

#XPath selector for picking up the popularity of the movie with the title "Trigun"
puts doc.elements["collection/movie[@title = 'Trigun']/popularity/text()"]

